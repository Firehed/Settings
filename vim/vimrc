let g:pathogen_blacklist = ['editorconfig-vim']
" Pathogen plugin
execute pathogen#infect()
syntax on
" see :help filetype-overview
filetype plugin indent on

" Debug loggging (for tracing LSP integrations, etc)
" call ch_logfile(expand('~/vim.log'), 'w')

" See https://learnvimscriptthehardway.stevelosh.com/chapters/42.html for
" additional information on directory structure.

colorscheme solarized
set background=dark
set laststatus=2 " Allows Lightline to work properly
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'inactive': {
    \   'left': [['readonly', 'relativepath', 'modified']]
    \ },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified', 'alestatus' ]
    \           ],
    \ },
    \ 'component': {
    \   'readonly': '%{&readonly?"RO":""}',
    \   'alestatus': '%{LinterStatus()}',
    \ },
    \ }

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    if l:counts.total == 0
        " e2 9c 93
        return '✓ ok'
    endif
    " e2 a8 89, e2 9a a0
    return printf('⨉ %d ⚠ %d', l:all_errors, l:all_non_errors)
endfunction

" Tab highlight plugin
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors=0
"hi IndentGuidesOdd ctermbg=233
"hi IndentGuidesEven ctermbg=234
hi IndentGuidesOdd  ctermbg=0
hi IndentGuidesEven ctermbg=10
hi LineNr ctermbg=8 ctermfg=10
" Local .vimrc: save settings when uppercase
let g:localvimrc_persistent = 1

" Set leader to space. Why not?
let g:mapleader = "\<space>"

" Bounce around with leader-arrow
nnoremap <leader><up> <C-w>k
nnoremap <leader><down> <C-w>j
nnoremap <leader><left> <C-w>h
nnoremap <leader><right> <C-w>l
set splitbelow
set splitright

set backspace=2      " Make backspace behave like a traditional editor, no special handling of indenting or line breaks
set encoding=utf-8   " Charset
scriptencoding utf8
set expandtab        " Expand (or not) tabs into spaces
set softtabstop=4
set shiftwidth=4
set tabstop=4        " Width of a tab literal, in spaces
set scrolloff=3      " Scroll window when cursor is near, not at, the top/bottom
set showmatch        " Highlight matching brackets
set noshowmode       " Don't show mode in status line, it's handled by lightline
set noautoread       " Do not automatically reload files if changed externally
" https://vi.stackexchange.com/questions/25086/vim-hangs-when-i-open-a-typescript-file
set regexpengine=0   " Automatic engine selection (default 1=old can be very slow for react-ts)

" Search settings
set hlsearch         " Highlight search matches
set incsearch        " Show pattern matching in realtime
set ignorecase       " Default to case-insensitive search
set smartcase        " Smart case-sensitivity (become case-sensitive if search contains uppercase chars)
" Remove search highlighting
noremap <leader><space> :noh<cr>
" Open NERDTree to current file
nnoremap <leader>o :NERDTreeFind<cr>

set ruler
set visualbell t_vb=
set number
set list
set listchars=tab:▸\ ,eol:¬
set noswapfile

" Move by screen line not file line
nnoremap j gj
nnoremap k gk

" Disable F1 help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

set wrap
set textwidth=79
set colorcolumn=80
set formatoptions=qrn1

" experimenting with search options
"nnoremap / /\v
"vnoremap / /\v


" Tips+plugins from http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" <leader>W strip trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Autocomplete settings
set completeopt=longest,menuone

" Toggle paste
noremap <leader>p :set paste!<cr>

" Q runs @q macro
nnoremap Q @q

" Rust autocomplete with Racer
" let g:racer_cmd = $HOME.'/.cargo/bin/racer'

" Allow SuperTab to hijack the autocomplete keystrokes
" let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

" set tags=tags;
" Definition jump
" NOTE: C-o is the default "go back" for this
nnoremap <C-]> :ALEGoToDefinition<CR>
nnoremap <C-}> :ALEGoToDefinition -vsplit<CR>
" Go to next/prev errors
nnoremap <C-j> :ALENextWrap<CR>
nnoremap <C-k> :ALEPreviousWrap<CR>

" ALE settings
if v:version < 800
    " Disable for older Vim versions
    let g:loaded_ale = 1
endif
let g:ale_completion_enabled = 1
let g:ale_lint_delay = 500 " milliseconds
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_sign_column_always = 1 " Keep sidebar open at all times

set omnifunc=ale#completion#OmniFunc

" Run only the following linters for the specified languages
let g:ale_fixers = {
    \ '*': ['remove_trailing_lines'],
\ }
let g:ale_linters = {
    \ 'html': [],
    \ 'php': ['langserver', 'php', 'phpcs', 'phpstan'],
    \ 'typescript': ['tsserver'],
\ }
let g:ale_php_phpstan_executable="vendor/bin/phpstan"
let g:ale_php_langserver_executable="vendor/bin/psalm-language-server"

" :w!! to write with sudo
cmap w!! w !sudo tee > /dev/null %

" Ctrl+P Settings
let g:ctrlp_use_caching = 0 " No cache
let g:ctrlp_max_files = 0   " No file limit
let g:ctrlp_custom_ignore = {
    \ 'dir': 'node_modules\|bower_components\|\.git$',
    \ 'file': '\.pyc$|DS_Store' }   " Keep these files and folders out of index

nnoremap <leader>a :Ack!<space>

" Prefer `rg` over `ag` over `ack` when available
if executable('rg')
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ackprg = 'rg -S --vimgrep'
elseif executable('ag')
    " Search with `ag` if it is installed
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ackprg = 'ag --vimgrep'
endif
